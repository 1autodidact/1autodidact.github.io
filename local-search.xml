<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GoogleGame</title>
    <link href="/2020/02/04/GoogleGame/"/>
    <url>/2020/02/04/GoogleGame/</url>
    
    <content type="html"><![CDATA[<p>##实现效果</p><blockquote><p><img src="/artitleimg/googleDinosaur.jpg" srcset="/img/loading.gif" alt=""></p></blockquote><blockquote><p>滚动背景模块</p></blockquote><pre><code> package wen.ming.game;import java.awt.Graphics2D;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.awt.Image;import javax.imageio.ImageIO;/** * 滚动背景 *  * @author mingrong * */public class BackgroundImage extends GameObject {    public int x1 = 0;    public int x2 = 50;    public int y2 = 25;    public static final int SPEED = 4;// 滚动速度    public BackgroundImage() {    }    /**     * 滚动     */    public void roll() {         x1 -= SPEED;// 第一幅图片左移         if (x1 &lt;= -50) {// 如果第一幅图片移出屏幕             x1 =50;// 回到屏幕右侧         }}}</code></pre>>常量设置模块 ``` package wen.ming.game;<p>public class Constant {<br>public static final int GAME_WIDTH = 793;<br>public static final int GAME_HEIGHT = 324;<br>}</p><pre><code>&gt;恐龙对象的创建</code></pre><p>package wen.ming.game;<br>import java.awt.Graphics;<br>import java.awt.Image;<br>import java.awt.Rectangle;<br>import java.awt.event.KeyEvent;</p><p>public class Dinasaur extends GameObject {<br>boolean left,up,right,down;<br>boolean live = true;<br>int stepTime = 0;//计时器<br>static final int fresh = 10;<br>private boolean jumpState = false;// 跳跃状态<br>private final int JUMP_HIGHT = 100;// 跳起最大高度<br>private final int LOWEST_Y = 220;// 落地最低坐标<br>private int jumpValue = 0;// 跳跃的增变量</p><pre><code>Image   dinasaurImg  = GameUtil.getImage(&quot;images/long1.png&quot;);Image   dinasaurImg2  = GameUtil.getImage(&quot;images/long2.png&quot;);Image image2;public  void  drawSelf(Graphics  g){    if(live){            g.drawImage(img, (int)x,(int) y, null);            if(left){                x -=speed;            }            if(right){                x += speed;            }            if(up){                y -=speed;    //y = y-speed;            }            if(down){                y += speed;        }    }else{    }    }    public  Dinasaur(Image  img, double x, double y){        this.img = img;        this.x = x+3;        this.y = y+3;        this.speed = 3;        this.width = img.getWidth(null) ;        this.height = img.getHeight(null);    }     public void move() {            step();// 不断踏步            if (jumpState) {// 如果正在跳跃                if (y &gt;= LOWEST_Y) {// 如果纵坐标大于等于最低点                    jumpValue = -14;// 增变量为负值                }                if (y &lt;= LOWEST_Y - JUMP_HIGHT) {// 如果跳过最高点                    jumpValue = 14;// 增变量为正值                }                y += jumpValue;// 纵坐标发生变化                if (y &gt;= LOWEST_Y) {// 如果再次落地                    jumpState = false;// 停止跳跃                }            }        }     void step() {            int tmp = stepTime / 100 % 2;            if (tmp == 1) {                image2 = dinasaurImg;            } else {                image2 = dinasaurImg2;            }            stepTime += fresh;        }     public void jump() {            jumpState = true;// 处于跳跃状态        }         public void left() {            x -= 5;        }        public void right() {            x += 5;        }        public void up() {            y -= 5;        }        public void down() {            y += 5;        }    //按下某个键，增加相应的方向    public  void   addDirection(KeyEvent  e){        switch (e.getKeyCode()) {        case KeyEvent.VK_LEFT:            left = true;            break;        case KeyEvent.VK_UP:            up = true;            break;        case KeyEvent.VK_RIGHT:            right = true;            break;        case KeyEvent.VK_DOWN:            down = true;            break;        }    }    //按下某个键，取消相应的方向        public  void   minusDirection(KeyEvent  e){            switch (e.getKeyCode()) {            case KeyEvent.VK_LEFT:                left = false;                break;            case KeyEvent.VK_UP:                up = false;                break;            case KeyEvent.VK_RIGHT:                right = false;                break;            case KeyEvent.VK_DOWN:                down = false;                break;            }        }        public  Rectangle   getRect(){</code></pre><p>// return new Rectangle((int)x+10,(int)y,20,10);<br>return new Rectangle((int)x, (int)y, width, height);<br>}<br>}</p><pre><code>&gt;游戏物体对象</code></pre><p>package wen.ming.game;</p><p>import java.awt.Graphics;<br>import java.awt.Image;<br>import java.awt.Rectangle;</p><p>/**</p><ul><li><p>游戏物体的父类</p></li><li><p>@author MingRong</p></li><li></li><li><p>/<br>public class GameObject {</p><pre><code>Image  img;double  x,y; int   speed;int  width, height;</code></pre><p>public void drawSelf(Graphics g){</p><pre><code>  g.drawImage(img, (int)x,(int) y, null);</code></pre><p>}</p><p>public GameObject(Image img, double x, double y, int speed, int width, int height) {</p><pre><code>  super();  this.img = img;  this.x = x;  this.y = y;  this.speed = speed;  this.width = width;  this.height = height;</code></pre><p>}</p><p>public GameObject(Image img, double x, double y) {</p><pre><code>  super();  this.img = img;  this.x = x;  this.y = y;</code></pre><p>}</p><p>public GameObject() {<br>}</p><p>/**</p><ul><li>返回物体所在的矩形。便于后续的碰撞检测</li><li>@return</li><li>/<br>public Rectangle getRect(){<br>return new Rectangle((int)x+20,(int)y,20,10);<br>}<br>}</li></ul></li></ul><pre><code>&gt; 返回指定路径文件的图片对象</code></pre><p>package wen.ming.game;<br>import java.awt.Image;<br>import java.awt.image.BufferedImage;<br>import java.io.IOException;<br>import java.net.URL;<br>import javax.imageio.ImageIO;</p><p>public class GameUtil {<br>// 工具类最好将构造器私有化。<br>private GameUtil() {<br>}</p><pre><code>/** * 返回指定路径文件的图片对象 * @param path * @return */public static Image getImage(String path) {    BufferedImage bi = null;    try {        URL u = GameUtil.class.getClassLoader().getResource(path);        bi = ImageIO.read(u);    } catch (IOException e) {        e.printStackTrace();    }    return bi;}</code></pre><p>}</p><pre><code>&gt;游戏主界面</code></pre><p>package wen.ming.game;<br>import java.awt.Color;<br>import java.awt.Font;<br>import java.awt.Frame;<br>import java.awt.Graphics;<br>import java.awt.Graphics2D;<br>import java.awt.Image;<br>import java.awt.event.KeyAdapter;<br>import java.awt.event.KeyEvent;<br>import java.awt.event.WindowAdapter;<br>import java.awt.event.WindowEvent;<br>import java.awt.image.BufferedImage;<br>import java.util.ArrayList;<br>import java.util.Date;<br>import java.util.List;</p><p>/**<br>*</p><ul><li><p>@author MingRong</p></li><li></li><li><p>/<br>public class MyGameFrame extends Frame {<br>private BufferedImage image;<br>private Graphics2D g2;</p><p>Image planeImg = GameUtil.getImage(“images/long1.png”);<br>Image planeImg2 = GameUtil.getImage(“images/long2.png”);<br>Image bgImg1 = GameUtil.getImage(“images/map.png”);<br>Image bgImg2 = GameUtil.getImage(“images/map1.png”);<br>Image bg = GameUtil.getImage(“images/map1.png”);<br>Image obstacleImg = GameUtil.getImage(“images/cactus03.png”);<br>Image overImg = GameUtil.getImage(“images/game_over.png”);<br>private Dinasaur dinasaur = new Dinasaur(planeImg, 250, 225);<br>private object obj = new object(obstacleImg,250,225);//<br>private BackgroundImage background = new BackgroundImage();<br>int stepTime = 0;<br>static final int fresh = 10;<br>boolean live = true;<br>int count = 0;<br>@Override<br>public void paint(Graphics g) {</p><pre><code>  if (live) {      obj.randomplace();      background.roll();      dinasaur.move();      Color   c =  g.getColor();      g.drawImage(bgImg2, (int)background.x1, (int)background.y2, this);      g.drawImage(obj.obstacle, obj.x, obj.y, this);      g.drawImage(planeImg, 0, 0, null);      g.drawImage(dinasaur.image2, (int)dinasaur.x, (int)dinasaur.y, this);      boolean  peng = dinasaur.getRect().intersects(obj.getRect());      if (peng) {          count+=1;          g.drawImage(overImg, (int)background.x1, (int)background.y2, this);          System.out.print(&quot;ruin&quot;);          if (count ==3) {              live = false;          }      }      stepTime += fresh;      g.setColor(c);   }  }</code></pre><p>/**</p><ul><li><p>刷新贞</p></li><li><p>@author Mingrong</p></li><li></li><li><p>/<br>class PaintThread extends Thread {<br>@Override<br>public void run() {</p><pre><code>  while(true){      repaint();              try {          Thread.sleep(40);       //1s=1000ms      } catch (InterruptedException e) {          e.printStackTrace();      }          }</code></pre><p>}</p><p>}</p></li></ul></li></ul><pre><code>class   KeyMonitor extends  KeyAdapter  {    @Override    public void keyPressed(KeyEvent e) {</code></pre><p>// dinasaur.addDirection(e);<br>int code = e.getKeyCode();</p><pre><code>            if (code == KeyEvent.VK_LEFT) {                dinasaur.left();            }            if (code == KeyEvent.VK_RIGHT) {                dinasaur.right();            }            if (code == KeyEvent.VK_UP) {                dinasaur.up();            }            if (code == KeyEvent.VK_DOWN) {                dinasaur.down();            }            if (code == KeyEvent.VK_SPACE) {                dinasaur.jump();            }    }    @Override    public void keyReleased(KeyEvent e) {        dinasaur.minusDirection(e);    }}public  void  launchFrame(){    this.setTitle(&quot;game&quot;);    this.setVisible(true);    this.setSize(Constant.GAME_WIDTH    , Constant.GAME_HEIGHT);    this.setLocation(500, 500);    this.addWindowListener(new WindowAdapter() {        @Override        public void windowClosing(WindowEvent e) {            System.exit(0);        }    });    new PaintThread().start();        addKeyListener(new KeyMonitor());   }public static void main(String[] args) {    MyGameFrame  f = new MyGameFrame();    f.launchFrame();}private Image offScreenImage = null;public void update(Graphics g) {    if(offScreenImage == null)        offScreenImage = this.createImage(Constant.GAME_WIDTH,Constant.GAME_HEIGHT);    Graphics gOff = offScreenImage.getGraphics();    paint(gOff);    g.drawImage(offScreenImage, 0, 0, null);}</code></pre><p>}</p><pre><code>&gt;障碍物类</code></pre><p>package wen.ming.game;</p><p>import javax.imageio.ImageIO;<br>import java.awt.*;<br>import java.awt.image.BufferedImage;<br>import java.io.File;<br>import java.io.IOException;<br>import java.util.Random;</p><p>public class object extends GameObject {</p><pre><code>Random r = new Random();public int x = 500;public int x2 = 50;public int y = 225;public boolean judge=false;public static final int SPEED = 11;// 滚动速度int temp = r.nextInt(4) + 1;//1-2-3Image obstacle;Image   obstacleImg  = GameUtil.getImage(&quot;images/cactus01.png&quot;);Image   obstacleImg2  = GameUtil.getImage(&quot;images/cactus03.png&quot;);int stepTime = 0;//计时器static final int fresh = 10;public  object(Image  img, double x, double y){    this.img = img;    this.x = (int)x;    this.y = (int)y;    this.speed = 3;    this.width = img.getWidth(null) ;    this.height = img.getHeight(null);}public object() {    this.x =500;    this.width = img.getWidth(null) ;    this.height = img.getHeight(null);}public void randomplace() {      int tmp = stepTime / 100 % 20;        if (tmp == 1) {            obstacle = obstacleImg;        } else {            obstacle = obstacleImg2;        }        stepTime += fresh;      x -= SPEED;// 第一幅图片左移      if (x &lt;= -500) {// 如果第一幅图片移出屏幕          x =500;// 回到屏幕右侧      }}public void moving() {         x -= SPEED;// 第一幅图片左移         if (x &lt;= -500) {// 如果第一幅图片移出屏幕             x =500;// 回到屏幕右侧         }}public  Rectangle   getRect(){</code></pre><p>// return new Rectangle((int)x+10,(int)y,20,10);<br>return new Rectangle((int)x, (int)y, width, height);<br>}<br>}<br>```</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java实现谷歌恐龙游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2020/02/02/test/"/>
    <url>/2020/02/02/test/</url>
    
    <content type="html"><![CDATA[<pre><code>    package wen.ming.game;    import java.awt.Graphics2D;    import java.awt.image.BufferedImage;    import java.io.File;    import java.io.IOException;    import java.awt.Image;    import javax.imageio.ImageIO;    /**     * 滚动背景     *      * @author mingrong     *     */    public class BackgroundImage extends GameObject {        public int x1 = 0;        public int x2 = 50;        public int y2 = 25;        public static final int SPEED = 4;// 滚动速度        public BackgroundImage() {        }        /**         * 滚动         */        public void roll() {             x1 -= SPEED;// 第一幅图片左移             if (x1 &lt;= -50) {// 如果第一幅图片移出屏幕                 x1 =50;// 回到屏幕右侧             }    }    }</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/01/26/hello-world/"/>
    <url>/2020/01/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
