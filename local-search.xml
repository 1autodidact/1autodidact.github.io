<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Opencv-Haar-Cascade分类器进行鼠标识别</title>
    <link href="/2020/02/22/pageOpencv-Haar-Cascade%E5%88%86%E7%B1%BB%E5%99%A8%E8%BF%9B%E8%A1%8C%E9%BC%A0%E6%A0%87%E8%AF%86%E5%88%AB/"/>
    <url>/2020/02/22/pageOpencv-Haar-Cascade%E5%88%86%E7%B1%BB%E5%99%A8%E8%BF%9B%E8%A1%8C%E9%BC%A0%E6%A0%87%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>Opencv实战</p><a id="more"></a><h3 id="检测思路"><a href="#检测思路" class="headerlink" title="检测思路"></a>检测思路</h3><ol><li>计算积分图，使用积分图（Integral Image）对Haar-like进行特征求值</li><li>挑选最优分类器；</li><li>使用AdaBoost算法把这些分类器训练成一个强分类器，用于区分鼠标和非鼠标</li><li>级联，也就是强分类器的强强联手。把强分类器级联到一起，提高准确率</li></ol><h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><p>利用haar特征，结合级联分类器进行鼠标检测： Haar分类器 = Haar-like特征 + 积分图方法 + AdaBoost +级联</p><h3 id="检测目标选择"><a href="#检测目标选择" class="headerlink" title="检测目标选择"></a>检测目标选择</h3><p>选择特征明显的物体(颜色和轮廓)</p><h3 id="样本构建方法"><a href="#样本构建方法" class="headerlink" title="样本构建方法"></a>样本构建方法</h3><p>样本分为正样本(有目标)、负样本(无目标)</p><ul><li>正样本<br>正样本构建：<br>拍20张，通过画图软件编辑图片大小50*50(图片尺寸可以减少训练的时间)，通过python程序分别调节每张目标图片的亮度各5张、对比度各5张，正样本最终筛选数量为191张,并生成描述文件。</li><li>调节亮度和对比度的python代码</li></ul><pre><code class="python">from PIL import Imagefrom PIL import ImageEnhanceimport osroot = &quot;C:/Users/空雨衣/Desktop/test/&quot;fileList = os.listdir(root)contrasparam = 0.3brightparam = 0.3sharpparam = 0.2contrcounter = 1brightcounter = 1sharpcounter = 1counter = 0for filename in fileList:    path = root  + filename    img = Image.open(path)    enh_con = ImageEnhance.Contrast(img)    enh_bri = ImageEnhance.Brightness(img)    enh_sha = ImageEnhance.Sharpness(img)    #调节对比度    for i in range(1,6):        image_contrasted = enh_con.enhance(contrasparam * i * counter*0.06)        newname1 = root + str(contrcounter) + &quot;1contrast1&quot; + str(i)+&quot;.jpg&quot;        image_contrasted.save(newname1)    contrcounter += 1    #调节亮度    for i in range(1, 6):        image_bright = enh_bri.enhance(brightparam * i * counter*0.06)        newname2 = root + str(contrcounter) + &quot;1brightness1&quot; + str(i)+&quot;.jpg&quot;        image_bright.save(newname2)    brightcounter += 1    counter += 1</code></pre><ul><li>负样本：<br>爬取百度图片870张并生成描述文件。</li></ul><pre><code class="python">import jsonimport itertoolsimport urllibimport requestsimport osimport reimport sysword=input(&quot;请输入关键字：&quot;)path=&#39;C:/Users/空雨衣/Desktop/negativePicture/ii&#39;if not os.path.exists(path):    os.mkdir(path)word=urllib.parse.quote(word)url = r&quot;http://image.baidu.com/search/acjson?tn=resultjson_com&amp;ipn=rj&amp;ct=201326592&amp;fp=result&amp;queryWord={word}&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;st=-1&amp;ic=0&amp;word={word}&amp;face=0&amp;istype=2nc=1&amp;pn={pn}&amp;rn=60&quot;urls=(url.format(word=word,pn=x)for x in itertools.count(start=0,step=60))index=0str_table = {    &#39;_z2C$q&#39;: &#39;:&#39;,    &#39;_z&amp;e3B&#39;: &#39;.&#39;,    &#39;AzdH3F&#39;: &#39;/&#39;}char_table = {    &#39;w&#39;: &#39;a&#39;,    &#39;k&#39;: &#39;b&#39;,    &#39;v&#39;: &#39;c&#39;,    &#39;1&#39;: &#39;d&#39;,    &#39;j&#39;: &#39;e&#39;,    &#39;u&#39;: &#39;f&#39;,    &#39;2&#39;: &#39;g&#39;,    &#39;i&#39;: &#39;h&#39;,    &#39;t&#39;: &#39;i&#39;,    &#39;3&#39;: &#39;j&#39;,    &#39;h&#39;: &#39;k&#39;,    &#39;s&#39;: &#39;l&#39;,    &#39;4&#39;: &#39;m&#39;,    &#39;g&#39;: &#39;n&#39;,    &#39;5&#39;: &#39;o&#39;,    &#39;r&#39;: &#39;p&#39;,    &#39;q&#39;: &#39;q&#39;,    &#39;6&#39;: &#39;r&#39;,    &#39;f&#39;: &#39;s&#39;,    &#39;p&#39;: &#39;t&#39;,    &#39;7&#39;: &#39;u&#39;,    &#39;e&#39;: &#39;v&#39;,    &#39;o&#39;: &#39;w&#39;,    &#39;8&#39;: &#39;1&#39;,    &#39;d&#39;: &#39;2&#39;,    &#39;n&#39;: &#39;3&#39;,    &#39;9&#39;: &#39;4&#39;,    &#39;c&#39;: &#39;5&#39;,    &#39;m&#39;: &#39;6&#39;,    &#39;0&#39;: &#39;7&#39;,    &#39;b&#39;: &#39;8&#39;,    &#39;l&#39;: &#39;9&#39;,    &#39;a&#39;: &#39;0&#39;}i=1char_table = {ord(key): ord(value) for key, value in char_table.items()}for url in urls:    html=requests.get(url,timeout=10).text    a=re.compile(r&#39;&quot;objURL&quot;:&quot;(.*?)&quot;&#39;)    downURL=re.findall(a,html)    for t in downURL:        for key, value in str_table.items():                t = t.replace(key, value)        t=t.translate(char_table)        try:            html_1=requests.get(t)            if str(html_1.status_code)[0]==&quot;4&quot;:                print(&#39;失败1&#39;)                continue        except Exception as e:            print(&#39;失败2&#39;)            continue        with open(path+&quot;/&quot;+str(i)+&quot;.jpg&quot;,&#39;wb&#39;) as f:            f.write(html_1.content)        i=i+1</code></pre><h3 id="训练模型参数"><a href="#训练模型参数" class="headerlink" title="训练模型参数"></a>训练模型参数</h3><blockquote><p><img src="/articleimg/model.jpg" srcset="/img/loading.gif" alt=""><br><img src="/articleimg/%E8%AE%AD%E7%BB%83%E7%BA%A7%E6%95%B0.jpg" srcset="/img/loading.gif" alt=""></p></blockquote><h3 id="模型检验"><a href="#模型检验" class="headerlink" title="模型检验"></a>模型检验</h3><pre><code class="c++">#include &quot;opencv2/objdetect.hpp&quot;#include &quot;opencv2/highgui.hpp&quot;#include &quot;opencv2/imgproc.hpp&quot;#include &lt;iostream&gt;#include &lt;io.h&gt;using namespace std;using namespace cv;void detectAndDisplay( Mat frame );CascadeClassifier face_cascade;CascadeClassifier eyes_cascade;int _count = 0;int main(){    //Load the cascades    if( !face_cascade.load(&quot;cascade.xml&quot;) )    {        cout &lt;&lt; &quot;--(!)Error loading face cascade\n&quot;;        return -1;    };    //read file    char *filename = &quot;C:\\cascade\\*.jpg&quot;;    struct _finddata_t fileinfo;    long handle;    handle = _findfirst(filename,&amp;fileinfo);    if(handle == -1) cout&lt;&lt;&quot;fail...&quot;&lt;&lt;endl;    else        cout&lt;&lt;fileinfo.name&lt;&lt;endl;    while(!_findnext(handle,&amp;fileinfo))    {        cout&lt;&lt;fileinfo.name&lt;&lt;endl;       Mat image=imread(fileinfo.name);        detectAndDisplay(image);    }    cout&lt;&lt;_count&lt;&lt;endl;    _findclose(handle);    system(&quot;pause&quot;);    waitKey(0);    return 0;}void detectAndDisplay( Mat frame ){    Mat frame_gray;    cvtColor( frame, frame_gray, COLOR_BGR2GRAY );    equalizeHist( frame_gray, frame_gray );    //-- Detect mouse    std::vector&lt;Rect&gt; faces;    face_cascade.detectMultiScale( frame_gray, faces );    for ( size_t i = 0; i &lt; faces.size(); i++ )    {        Point center( faces[i].x + faces[i].width/2, faces[i].y + faces[i].height/2 );        ellipse( frame, center, Size( faces[i].width/2, faces[i].height/2 ), 0, 0, 360, Scalar( 255, 0, 255 ), 4 );        Mat faceROI = frame_gray( faces[i] );    }    if(!faces.empty()){        _count += 1;    }    //-- Show what you got    imshow( &quot;Capture - Face detection&quot;, frame );}</code></pre>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Google插件让世界变安静</title>
    <link href="/2020/02/12/%E5%AE%89%E9%9D%99%E7%94%9F%E6%B4%BB%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6/"/>
    <url>/2020/02/12/%E5%AE%89%E9%9D%99%E7%94%9F%E6%B4%BB%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>谷歌效率插件推荐</p><a id="more"></a><h2 id="安静的浏览体验及高效办公从此刻开始"><a href="#安静的浏览体验及高效办公从此刻开始" class="headerlink" title="安静的浏览体验及高效办公从此刻开始"></a>安静的浏览体验及高效办公从此刻开始</h2><p>请先安装最新版谷歌浏览器(旧版可能装不上插件)<br><a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">下载地址</a></p><h4 id="广告拦截AdblockPLus"><a href="#广告拦截AdblockPLus" class="headerlink" title="广告拦截AdblockPLus"></a>广告拦截AdblockPLus</h4><blockquote><p><img src="/articleimg/adblock.png" srcset="/img/loading.gif" alt=""></p></blockquote><ul><li>干净的上网页面(CSDN广告全无)<blockquote><p><img src="/articleimg/csdn.png" srcset="/img/loading.gif" alt=""></p></blockquote><h4 id="谷歌访问助手"><a href="#谷歌访问助手" class="headerlink" title="谷歌访问助手"></a>谷歌访问助手</h4><blockquote><p><img src="/articleimg/google.png" srcset="/img/loading.gif" alt=""></p></blockquote></li></ul><blockquote><p><img src="/articleimg/clean.png" srcset="/img/loading.gif" alt=""></p></blockquote><h4 id="沙拉翻译插件-比划词翻译强"><a href="#沙拉翻译插件-比划词翻译强" class="headerlink" title="沙拉翻译插件(比划词翻译强)"></a>沙拉翻译插件(比划词翻译强)</h4><blockquote><p><img src="/articleimg/shala.png" srcset="/img/loading.gif" alt=""></p></blockquote><h4 id="插件下载地址"><a href="#插件下载地址" class="headerlink" title="插件下载地址"></a>插件下载地址</h4><p><a href="https://chrome.zzzmh.cn/" target="_blank" rel="noopener">插件地址</a></p><h4 id="插件安装方式"><a href="#插件安装方式" class="headerlink" title="插件安装方式"></a>插件安装方式</h4><ul><li><p>下载插件解压后的crx包直接扔进扩展程序上面即可</p><blockquote><p><img src="/articleimg/step.JPG" srcset="/img/loading.gif" alt=""></p></blockquote></li><li><p>crx扔到上方即可</p><blockquote><p><img src="/articleimg/plugin.png" srcset="/img/loading.gif" alt=""></p></blockquote></li></ul><h4 id="最后一款文件夹管理工具QTTabBar-告别带广告的clover"><a href="#最后一款文件夹管理工具QTTabBar-告别带广告的clover" class="headerlink" title="最后一款文件夹管理工具QTTabBar(告别带广告的clover)"></a>最后一款文件夹管理工具QTTabBar(告别带广告的clover)</h4><ul><li><p>文件夹可变标签栏(避免频繁切换)</p><blockquote><p><img src="/articleimg/folder.JPG" srcset="/img/loading.gif" alt=""></p></blockquote></li><li><p>操作按下面这位博主的blog<br><a href="https://sspai.com/post/52521" target="_blank" rel="noopener">操作地址</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Efficiency</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo主题更换</title>
    <link href="/2020/02/06/Hexo%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/"/>
    <url>/2020/02/06/Hexo%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>HexoStyle三款博客样式</p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>git bash，进入到博客的本地目录中,</li></ul><blockquote><p>cd 到你的博客目录路径</p></blockquote><ul><li>找到对应的主题仓库获取http地址,下面有三种主题仓库的地址<br><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">matery</a><br><a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">fluid</a><br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">next</a></li></ul><blockquote><p><img src="/articleimg/clo.JPG" srcset="/img/loading.gif" alt=""></p></blockquote><ul><li>git clone 然后使用clone的方法将想要的主题下载下来。（我选用的是fluid主题）<pre><code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git</code></pre></li></ul><ul><li>修改配置文件<br>git克隆完成后，打开当前目录下的“_config.yml”配置文件。<pre><code>theme: 改成对应的主题(“：”冒号之后空格不可少）</code></pre><blockquote><p><img src="/articleimg/%E4%B8%BB%E9%A2%98.JPG" srcset="/img/loading.gif" alt=""></p></blockquote></li></ul><h2 id="Hexo博客的根目录-Gitbash执行下面命令-部署到github上"><a href="#Hexo博客的根目录-Gitbash执行下面命令-部署到github上" class="headerlink" title="Hexo博客的根目录,Gitbash执行下面命令(部署到github上)"></a>Hexo博客的根目录,Gitbash执行下面命令(部署到github上)</h2><pre><code>hexo g</code></pre><pre><code> hexo d</code></pre><h2 id="我的博客界面"><a href="#我的博客界面" class="headerlink" title="我的博客界面"></a>我的博客界面</h2><p><a href="https://wenmrong.com/" target="_blank" rel="noopener">我的博客欢迎参观</a></p><blockquote><p><img src="/articleimg/sample1.JPG" srcset="/img/loading.gif" alt=""></p></blockquote><blockquote><p><img src="/articleimg/sample2.JPG" srcset="/img/loading.gif" alt=""></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo自定义域名及访问优化</title>
    <link href="/2020/02/06/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8F%8A%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96/"/>
    <url>/2020/02/06/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8F%8A%E8%AE%BF%E9%97%AE%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>Hexo三种优化方法</p><a id="more"></a><h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><h2 id="域名准备"><a href="#域名准备" class="headerlink" title="域名准备"></a>域名准备</h2><p>​购买域名及实名认证不再赘述，可通过阿里云、腾讯云等平台自行购买域名。</p><h2 id="Github域名解析-解析你的域名到web服务器-进而实现访问服务器的网站"><a href="#Github域名解析-解析你的域名到web服务器-进而实现访问服务器的网站" class="headerlink" title="Github域名解析(解析你的域名到web服务器,进而实现访问服务器的网站)"></a>Github域名解析(解析你的域名到web服务器,进而实现访问服务器的网站)</h2><h4 id="进入解析界面"><a href="#进入解析界面" class="headerlink" title="进入解析界面"></a>进入解析界面</h4><blockquote><p><img src="/articleimg/%E8%AE%B0%E5%BD%95.JPG" srcset="/img/loading.gif" alt=""></p></blockquote><ul><li><p>添加三条记录</p></li><li><p>第一条记录A型的记录值</p><pre><code>可通过 命令行(cmd)  ping username.github.io 得出</code></pre></li><li><p>第二条记录A型的记录值</p><pre><code>可通过 命令行(cmd)  ping 购买的域名 得出</code></pre></li><li><p>第三条记录CNAME的记录值(以后搜索栏输入你的域名就可以指向下面的地址)</p><pre><code>你的username.githb.io</code></pre><blockquote><p><img src="/articleimg/%E8%AE%B0%E5%BD%95%E5%80%BC.JPG" srcset="/img/loading.gif" alt=""></p></blockquote></li><li><p>线路类型默认</p></li></ul><h2 id="配置github-page绑定解析的域名"><a href="#配置github-page绑定解析的域名" class="headerlink" title="配置github page绑定解析的域名"></a>配置github page绑定解析的域名</h2><p>打开username.github.io后缀仓库，点击settings进入设置界面<br>下翻到Github pages下的Custom domain,填入刚解析的域名</p><h2 id="coding域名绑定"><a href="#coding域名绑定" class="headerlink" title="coding域名绑定"></a>coding域名绑定</h2><ul><li>域名解析的时候把username.github.io改成username.coding.me<br><a href="https://help.coding.net/docs/devops/cd/static-website.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">域名绑定</a></li></ul><h1 id="Hexo访问优化"><a href="#Hexo访问优化" class="headerlink" title="Hexo访问优化"></a>Hexo访问优化</h1><ul><li>将各种第三方库配置公共 CDN 是最有效的方式，可以通过配置 <code>_static_prefix.yml</code> 来链接，具体可参考 <a href="https://fluid-dev.github.io/hexo-fluid-docs/static-conf/" target="_blank" rel="noopener">静态配置</a>；</li></ul><ul><li>使用 npm install hexo-all-minifier –save 安装插件，并配置_config.yml</li></ul><pre><code># minifierall_minifier: truehtml_minifier:  enable: true  ignore_error: false  exclude:css_minifier:  enable: true  exclude:    - &#39;*.min.css&#39;js_minifier:  enable: false  mangle: true  output:  compress:  exclude:    - &#39;*.min.js&#39;image_minifier:  enable: false  interlaced: false  multipass: false  optimizationLevel: 2  pngquant: false  progressive: false</code></pre><ul><li>全站CDN选用<br>看到有博主选用cloudflare,配置之后速度大幅提升,配置简单还是免费<br><a href="https://www.cloudflare.com/" target="_blank" rel="noopener">cloudflare</a><h4 id="cloudflare全站CDN配置"><a href="#cloudflare全站CDN配置" class="headerlink" title="cloudflare全站CDN配置"></a>cloudflare全站CDN配置</h4></li></ul><blockquote><p>在 Add a website 中填入你的域名，然后点击 Scan DNS Records，等待扫描完成,接着点击 Continue。<br>在 Select a Cloudflare Plan 中选中 Free Website（当然你也可以选择其他套餐，如果你希望付费的话,点击 Continue。</p></blockquote><blockquote><p>接下来会出现两行 DNS 记录，在你的域名商处(我的是腾讯云)，将 DNS解析服务器 修改为 CloudFlare 提供的地址。点击 Continue<br>CloudFlare 既是一个 CDN 服务商，同样也是一个 DNS 服务商。<br><img src="/articleimg/%E4%BF%AE%E6%94%B9dns.JPG" srcset="/img/loading.gif" alt=""><br>把DNS服务器改成cloudflare给的两条即可完成,激活效果如下<br><img src="/articleimg/%E6%BF%80%E6%B4%BB.JPG" srcset="/img/loading.gif" alt=""></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HexoBlog部署</title>
    <link href="/2020/02/06/HexoBlog%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/02/06/HexoBlog%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>Hexo部署到Github和coding</p><a id="more"></a><h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><p><a href="https://www.jianshu.com/p/3ef797fcb17d" target="_blank" rel="noopener">git的安装</a></p><h2 id="配置ssh-key-免密登陆技术"><a href="#配置ssh-key-免密登陆技术" class="headerlink" title="配置ssh key(免密登陆技术)"></a>配置ssh key(免密登陆技术)</h2><p><a href="https://www.jianshu.com/p/3ef797fcb17d" target="_blank" rel="noopener">ssh key配置</a></p><h2 id="github上创建一个仓库"><a href="#github上创建一个仓库" class="headerlink" title="github上创建一个仓库"></a>github上创建一个仓库</h2><pre><code>必须是这种格式:仓库名.github.io</code></pre><h2 id="node-js的安装以及使用cnpm国内镜像解决卡顿"><a href="#node-js的安装以及使用cnpm国内镜像解决卡顿" class="headerlink" title="node.js的安装以及使用cnpm国内镜像解决卡顿"></a>node.js的安装以及使用cnpm国内镜像解决卡顿</h2><p><a href="https://www.jianshu.com/p/1ceb64146bcb" target="_blank" rel="noopener">node.js安装</a></p><h2 id="本地搭建hexo博客-并部署到GitHub"><a href="#本地搭建hexo博客-并部署到GitHub" class="headerlink" title="本地搭建hexo博客,并部署到GitHub"></a>本地搭建hexo博客,并部署到GitHub</h2><p><a href="https://www.jianshu.com/p/b83affd675aa" target="_blank" rel="noopener">文档</a></p><h2 id="hexo博客部署到国内coding-ssh-key-还是用上面Github那份"><a href="#hexo博客部署到国内coding-ssh-key-还是用上面Github那份" class="headerlink" title="hexo博客部署到国内coding(ssh key 还是用上面Github那份)"></a>hexo博客部署到国内coding(ssh key 还是用上面Github那份)</h2><h4 id="coding现在个人使用免费-不用腾讯云升级vip"><a href="#coding现在个人使用免费-不用腾讯云升级vip" class="headerlink" title="coding现在个人使用免费,不用腾讯云升级vip"></a>coding现在个人使用免费,不用腾讯云升级vip</h4><p><a href="https://cloud.tencent.com/developer/article/1142213" target="_blank" rel="noopener">部署coding教程</a><br><a href="https://help.coding.net/?_ga=2.84936217.168096557.1580971006-1699841924.1580862857" target="_blank" rel="noopener">coding帮助文档</a></p><h4 id="coding新版本操作改动"><a href="#coding新版本操作改动" class="headerlink" title="coding新版本操作改动"></a>coding新版本操作改动</h4><blockquote><p><img src="/articleimg/%E7%BB%86%E8%8A%82.JPG" srcset="/img/loading.gif" alt=""></p></blockquote><blockquote><p><img src="/articleimg/static.JPG" srcset="/img/loading.gif" alt=""></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoogleGame</title>
    <link href="/2020/02/04/GoogleGame/"/>
    <url>/2020/02/04/GoogleGame/</url>
    
    <content type="html"><![CDATA[<p>Java实现谷歌恐龙游戏</p><a id="more"></a><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><blockquote><p><img src="/articleimg/game.jpg" srcset="/img/loading.gif" alt=""></p></blockquote><h3 id="滚动背景模块"><a href="#滚动背景模块" class="headerlink" title="滚动背景模块"></a>滚动背景模块</h3><pre><code class="java">package wen.ming.game;import java.awt.Graphics2D;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.awt.Image;import javax.imageio.ImageIO;/** * 滚动背景 *  * @author mingrong * */public class BackgroundImage extends GameObject {    public int x1 = 0;    public int x2 = 50;    public int y2 = 25;    public static final int SPEED = 4;// 滚动速度    public BackgroundImage() {    }    /**     * 滚动     */    public void roll() {         x1 -= SPEED;// 第一幅图片左移         if (x1 &lt;= -50) {// 如果第一幅图片移出屏幕             x1 =50;// 回到屏幕右侧         }}}</code></pre><h3 id="常量设置模块"><a href="#常量设置模块" class="headerlink" title="常量设置模块"></a>常量设置模块</h3><pre><code class="java">package wen.ming.game;public class Constant {    public static final int GAME_WIDTH = 793;    public static final  int  GAME_HEIGHT = 324;}</code></pre><h3 id="恐龙对象的创建"><a href="#恐龙对象的创建" class="headerlink" title="恐龙对象的创建"></a>恐龙对象的创建</h3><pre><code class="java">package wen.ming.game;import java.awt.Graphics;import java.awt.Image;import java.awt.Rectangle;import java.awt.event.KeyEvent;public class Dinasaur extends GameObject {    boolean  left,up,right,down;    boolean  live = true;      int stepTime = 0;//计时器    static final int fresh = 10;    private boolean jumpState = false;// 跳跃状态    private final int JUMP_HIGHT = 100;// 跳起最大高度    private final int LOWEST_Y = 220;// 落地最低坐标    private int jumpValue = 0;// 跳跃的增变量         Image   dinasaurImg  = GameUtil.getImage(&quot;images/long1.png&quot;);    Image   dinasaurImg2  = GameUtil.getImage(&quot;images/long2.png&quot;);    Image image2;    public  void  drawSelf(Graphics  g){        if(live){                g.drawImage(img, (int)x,(int) y, null);                if(left){                    x -=speed;                }                if(right){                    x += speed;                }                if(up){                    y -=speed;    //y = y-speed;                }                if(down){                    y += speed;            }        }else{        }        }        public  Dinasaur(Image  img, double x, double y){            this.img = img;            this.x = x+3;            this.y = y+3;            this.speed = 3;            this.width = img.getWidth(null) ;            this.height = img.getHeight(null);        }         public void move() {                step();// 不断踏步                if (jumpState) {// 如果正在跳跃                    if (y &gt;= LOWEST_Y) {// 如果纵坐标大于等于最低点                        jumpValue = -14;// 增变量为负值                    }                    if (y &lt;= LOWEST_Y - JUMP_HIGHT) {// 如果跳过最高点                        jumpValue = 14;// 增变量为正值                    }                    y += jumpValue;// 纵坐标发生变化                    if (y &gt;= LOWEST_Y) {// 如果再次落地                        jumpState = false;// 停止跳跃                    }                }            }         void step() {                int tmp = stepTime / 100 % 2;                if (tmp == 1) {                    image2 = dinasaurImg;                } else {                    image2 = dinasaurImg2;                }                stepTime += fresh;            }         public void jump() {                jumpState = true;// 处于跳跃状态            }             public void left() {                x -= 5;            }            public void right() {                x += 5;            }            public void up() {                y -= 5;            }            public void down() {                y += 5;            }        //按下某个键，增加相应的方向        public  void   addDirection(KeyEvent  e){            switch (e.getKeyCode()) {            case KeyEvent.VK_LEFT:                left = true;                break;            case KeyEvent.VK_UP:                up = true;                break;            case KeyEvent.VK_RIGHT:                right = true;                break;            case KeyEvent.VK_DOWN:                down = true;                break;            }        }        //按下某个键，取消相应的方向            public  void   minusDirection(KeyEvent  e){                switch (e.getKeyCode()) {                case KeyEvent.VK_LEFT:                    left = false;                    break;                case KeyEvent.VK_UP:                    up = false;                    break;                case KeyEvent.VK_RIGHT:                    right = false;                    break;                case KeyEvent.VK_DOWN:                    down = false;                    break;                }            }            public  Rectangle   getRect(){//                return  new Rectangle((int)x+10,(int)y,20,10);                return  new Rectangle((int)x, (int)y, width, height);            }}</code></pre><h3 id="游戏物体对象"><a href="#游戏物体对象" class="headerlink" title="游戏物体对象"></a>游戏物体对象</h3><pre><code class="java">package wen.ming.game;import java.awt.Graphics;import java.awt.Image;import java.awt.Rectangle;/** * 游戏物体的父类 * @author MingRong * */public class GameObject {      Image  img;      double  x,y;       int   speed;      int  width, height;    public  void  drawSelf(Graphics  g){        g.drawImage(img, (int)x,(int) y, null);    }    public GameObject(Image img, double x, double y, int speed, int width, int height) {        super();        this.img = img;        this.x = x;        this.y = y;        this.speed = speed;        this.width = width;        this.height = height;    }    public GameObject(Image img, double x, double y) {        super();        this.img = img;        this.x = x;        this.y = y;    }    public GameObject() {    }    /**     * 返回物体所在的矩形。便于后续的碰撞检测     * @return     */    public  Rectangle   getRect(){        return  new Rectangle((int)x+20,(int)y,20,10);    }}</code></pre><h3 id="返回指定路径文件的图片对象"><a href="#返回指定路径文件的图片对象" class="headerlink" title="返回指定路径文件的图片对象"></a>返回指定路径文件的图片对象</h3><pre><code class="java">package wen.ming.game;import java.awt.Image;import java.awt.image.BufferedImage;import java.io.IOException;import java.net.URL;import javax.imageio.ImageIO;public class GameUtil {    // 工具类最好将构造器私有化。    private GameUtil() {    }     /**     * 返回指定路径文件的图片对象     * @param path     * @return     */    public static Image getImage(String path) {        BufferedImage bi = null;        try {            URL u = GameUtil.class.getClassLoader().getResource(path);            bi = ImageIO.read(u);        } catch (IOException e) {            e.printStackTrace();        }        return bi;    }}</code></pre><h3 id="游戏主界面"><a href="#游戏主界面" class="headerlink" title="游戏主界面"></a>游戏主界面</h3><pre><code class="java">package wen.ming.game;import java.awt.Color;import java.awt.Font;import java.awt.Frame;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Image;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.awt.image.BufferedImage;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * * @author MingRong * */public class MyGameFrame  extends  Frame {    private BufferedImage image;             private Graphics2D g2;      Image   planeImg  = GameUtil.getImage(&quot;images/long1.png&quot;);    Image   planeImg2  = GameUtil.getImage(&quot;images/long2.png&quot;);    Image   bgImg1  = GameUtil.getImage(&quot;images/map.png&quot;);    Image   bgImg2  = GameUtil.getImage(&quot;images/map1.png&quot;);    Image   bg  = GameUtil.getImage(&quot;images/map1.png&quot;);    Image   obstacleImg  = GameUtil.getImage(&quot;images/cactus03.png&quot;);    Image   overImg  = GameUtil.getImage(&quot;images/game_over.png&quot;);    private Dinasaur dinasaur = new Dinasaur(planeImg, 250, 225);    private object obj = new object(obstacleImg,250,225);//    private BackgroundImage background = new BackgroundImage();    int stepTime = 0;          static final int fresh = 10;    boolean live = true;    int count = 0;    @Override    public void paint(Graphics g) {            if (live) {            obj.randomplace();            background.roll();            dinasaur.move();            Color   c =  g.getColor();            g.drawImage(bgImg2, (int)background.x1, (int)background.y2, this);            g.drawImage(obj.obstacle, obj.x, obj.y, this);            g.drawImage(planeImg, 0, 0, null);            g.drawImage(dinasaur.image2, (int)dinasaur.x, (int)dinasaur.y, this);            boolean  peng = dinasaur.getRect().intersects(obj.getRect());            if (peng) {                count+=1;                g.drawImage(overImg, (int)background.x1, (int)background.y2, this);                System.out.print(&quot;ruin&quot;);                if (count ==3) {                    live = false;                }            }            stepTime += fresh;            g.setColor(c);         }        }    /**     * 刷新贞     * @author Mingrong     *     */    class  PaintThread  extends  Thread  {        @Override        public void run() {            while(true){                repaint();                                        try {                    Thread.sleep(40);       //1s=1000ms                } catch (InterruptedException e) {                    e.printStackTrace();                }                    }        }    }    class   KeyMonitor extends  KeyAdapter  {        @Override        public void keyPressed(KeyEvent e) {//            dinasaur.addDirection(e);              int code = e.getKeyCode();                               if (code == KeyEvent.VK_LEFT) {                    dinasaur.left();                }                if (code == KeyEvent.VK_RIGHT) {                    dinasaur.right();                }                if (code == KeyEvent.VK_UP) {                    dinasaur.up();                }                if (code == KeyEvent.VK_DOWN) {                    dinasaur.down();                }                if (code == KeyEvent.VK_SPACE) {                    dinasaur.jump();                }        }        @Override        public void keyReleased(KeyEvent e) {            dinasaur.minusDirection(e);        }    }    public  void  launchFrame(){        this.setTitle(&quot;game&quot;);        this.setVisible(true);        this.setSize(Constant.GAME_WIDTH    , Constant.GAME_HEIGHT);        this.setLocation(500, 500);        this.addWindowListener(new WindowAdapter() {            @Override            public void windowClosing(WindowEvent e) {                System.exit(0);            }        });        new PaintThread().start();            addKeyListener(new KeyMonitor());       }    public static void main(String[] args) {        MyGameFrame  f = new MyGameFrame();        f.launchFrame();    }    private Image offScreenImage = null;    public void update(Graphics g) {        if(offScreenImage == null)            offScreenImage = this.createImage(Constant.GAME_WIDTH,Constant.GAME_HEIGHT);        Graphics gOff = offScreenImage.getGraphics();        paint(gOff);        g.drawImage(offScreenImage, 0, 0, null);    }}</code></pre><h3 id="障碍物类"><a href="#障碍物类" class="headerlink" title="障碍物类"></a>障碍物类</h3><pre><code class="java">package wen.ming.game;import javax.imageio.ImageIO;import java.awt.*;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.util.Random;public class object extends GameObject {    Random r = new Random();    public int x = 500;    public int x2 = 50;    public int y = 225;    public boolean judge=false;    public static final int SPEED = 11;// 滚动速度    int temp = r.nextInt(4) + 1;//1-2-3    Image obstacle;    Image   obstacleImg  = GameUtil.getImage(&quot;images/cactus01.png&quot;);    Image   obstacleImg2  = GameUtil.getImage(&quot;images/cactus03.png&quot;);    int stepTime = 0;//计时器    static final int fresh = 10;    public  object(Image  img, double x, double y){        this.img = img;        this.x = (int)x;        this.y = (int)y;        this.speed = 3;        this.width = img.getWidth(null) ;        this.height = img.getHeight(null);    }    public object() {        this.x =500;        this.width = img.getWidth(null) ;        this.height = img.getHeight(null);    }    public void randomplace() {          int tmp = stepTime / 100 % 20;            if (tmp == 1) {                obstacle = obstacleImg;            } else {                obstacle = obstacleImg2;            }            stepTime += fresh;          x -= SPEED;// 第一幅图片左移                   if (x &lt;= -500) {// 如果第一幅图片移出屏幕              x =500;// 回到屏幕右侧          }    }    public void moving() {                      x -= SPEED;// 第一幅图片左移                       if (x &lt;= -500) {// 如果第一幅图片移出屏幕                 x =500;// 回到屏幕右侧             }    }    public  Rectangle   getRect(){//        return  new Rectangle((int)x+10,(int)y,20,10);        return  new Rectangle((int)x, (int)y, width, height);    } }</code></pre>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/02/03/hello-world/"/>
    <url>/2020/02/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Hexo</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>HelloWorld</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
